// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.3
//   protoc               v5.28.2
// source: comments/comments.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/dist/cjs/wire';
export const protobufPackage = "comment";

export enum SortOrder {
  ASC = 0,
  DESC = 1,
  UNRECOGNIZED = -1,
}

export function sortOrderFromJSON(object: any): SortOrder {
  switch (object) {
    case 0:
    case "ASC":
      return SortOrder.ASC;
    case 1:
    case "DESC":
      return SortOrder.DESC;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SortOrder.UNRECOGNIZED;
  }
}

export function sortOrderToJSON(object: SortOrder): string {
  switch (object) {
    case SortOrder.ASC:
      return "ASC";
    case SortOrder.DESC:
      return "DESC";
    case SortOrder.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum CommentSortColumn {
  COMMENT_CREATED_AT = 0,
  COMMENT_AUTHOR = 1,
  COMMENT_CONTENT = 2,
  COMMENT_ID = 3,
  UNRECOGNIZED = -1,
}

export function commentSortColumnFromJSON(object: any): CommentSortColumn {
  switch (object) {
    case 0:
    case "COMMENT_CREATED_AT":
      return CommentSortColumn.COMMENT_CREATED_AT;
    case 1:
    case "COMMENT_AUTHOR":
      return CommentSortColumn.COMMENT_AUTHOR;
    case 2:
    case "COMMENT_CONTENT":
      return CommentSortColumn.COMMENT_CONTENT;
    case 3:
    case "COMMENT_ID":
      return CommentSortColumn.COMMENT_ID;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CommentSortColumn.UNRECOGNIZED;
  }
}

export function commentSortColumnToJSON(object: CommentSortColumn): string {
  switch (object) {
    case CommentSortColumn.COMMENT_CREATED_AT:
      return "COMMENT_CREATED_AT";
    case CommentSortColumn.COMMENT_AUTHOR:
      return "COMMENT_AUTHOR";
    case CommentSortColumn.COMMENT_CONTENT:
      return "COMMENT_CONTENT";
    case CommentSortColumn.COMMENT_ID:
      return "COMMENT_ID";
    case CommentSortColumn.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum CommentFilterField {
  FILTER_AUTHOR = 0,
  FILTER_PARENT_ID = 1,
  FILTER_RESOURCE_ID = 2,
  /** FILTER_NULL_PARENT_ID - To handle NULL checks */
  FILTER_NULL_PARENT_ID = 3,
  /** FILTER_NOT_NULL_PARENT_ID - To handle NOT NULL checks */
  FILTER_NOT_NULL_PARENT_ID = 4,
  UNRECOGNIZED = -1,
}

export function commentFilterFieldFromJSON(object: any): CommentFilterField {
  switch (object) {
    case 0:
    case "FILTER_AUTHOR":
      return CommentFilterField.FILTER_AUTHOR;
    case 1:
    case "FILTER_PARENT_ID":
      return CommentFilterField.FILTER_PARENT_ID;
    case 2:
    case "FILTER_RESOURCE_ID":
      return CommentFilterField.FILTER_RESOURCE_ID;
    case 3:
    case "FILTER_NULL_PARENT_ID":
      return CommentFilterField.FILTER_NULL_PARENT_ID;
    case 4:
    case "FILTER_NOT_NULL_PARENT_ID":
      return CommentFilterField.FILTER_NOT_NULL_PARENT_ID;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CommentFilterField.UNRECOGNIZED;
  }
}

export function commentFilterFieldToJSON(object: CommentFilterField): string {
  switch (object) {
    case CommentFilterField.FILTER_AUTHOR:
      return "FILTER_AUTHOR";
    case CommentFilterField.FILTER_PARENT_ID:
      return "FILTER_PARENT_ID";
    case CommentFilterField.FILTER_RESOURCE_ID:
      return "FILTER_RESOURCE_ID";
    case CommentFilterField.FILTER_NULL_PARENT_ID:
      return "FILTER_NULL_PARENT_ID";
    case CommentFilterField.FILTER_NOT_NULL_PARENT_ID:
      return "FILTER_NOT_NULL_PARENT_ID";
    case CommentFilterField.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Message representing a single comment. */
export interface Comment {
  id: string;
  content: string;
  author: string;
  parentId: string;
  resourceId: string;
  createdAt: string;
  updatedAt: string;
}

/** A filter definition to apply during paginated fetch. */
export interface Filter {
  field: CommentFilterField;
  value: string;
}

/** Container for multiple filters. */
export interface Filters {
  filters: Filter[];
}

/** Define a oneof for the key to allow either string or integer values. */
export interface GetPaginatedCommentsRequest {
  resourceId: string;
  stringKey?: string | undefined;
  intKey?: string | undefined;
  limit: number;
  order: SortOrder;
  column: CommentSortColumn;
  filters?: Filters | undefined;
}

/** Response message for paginated comments. */
export interface GetPaginatedCommentsResponse {
  comments: Comment[];
  lastComment?: Comment | undefined;
}

/** Request message for creating a comment. */
export interface CreateCommentRequest {
  content: string;
  author: string;
  parentId: string;
  resourceId: string;
}

/** Response message containing the created comment. */
export interface CommentResponse {
  comment?: Comment | undefined;
}

function createBaseComment(): Comment {
  return { id: "", content: "", author: "", parentId: "", resourceId: "", createdAt: "", updatedAt: "" };
}

export const Comment: MessageFns<Comment> = {
  encode(message: Comment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.content !== "") {
      writer.uint32(18).string(message.content);
    }
    if (message.author !== "") {
      writer.uint32(26).string(message.author);
    }
    if (message.parentId !== "") {
      writer.uint32(34).string(message.parentId);
    }
    if (message.resourceId !== "") {
      writer.uint32(42).string(message.resourceId);
    }
    if (message.createdAt !== "") {
      writer.uint32(50).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(58).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Comment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseComment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.content = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.author = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.parentId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.resourceId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Comment {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      author: isSet(object.author) ? globalThis.String(object.author) : "",
      parentId: isSet(object.parentId) ? globalThis.String(object.parentId) : "",
      resourceId: isSet(object.resourceId) ? globalThis.String(object.resourceId) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
    };
  },

  toJSON(message: Comment): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.author !== "") {
      obj.author = message.author;
    }
    if (message.parentId !== "") {
      obj.parentId = message.parentId;
    }
    if (message.resourceId !== "") {
      obj.resourceId = message.resourceId;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Comment>, I>>(base?: I): Comment {
    return Comment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Comment>, I>>(object: I): Comment {
    const message = createBaseComment();
    message.id = object.id ?? "";
    message.content = object.content ?? "";
    message.author = object.author ?? "";
    message.parentId = object.parentId ?? "";
    message.resourceId = object.resourceId ?? "";
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    return message;
  },
};

function createBaseFilter(): Filter {
  return { field: 0, value: "" };
}

export const Filter: MessageFns<Filter> = {
  encode(message: Filter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.field !== 0) {
      writer.uint32(8).int32(message.field);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Filter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFilter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.field = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Filter {
    return {
      field: isSet(object.field) ? commentFilterFieldFromJSON(object.field) : 0,
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Filter): unknown {
    const obj: any = {};
    if (message.field !== 0) {
      obj.field = commentFilterFieldToJSON(message.field);
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Filter>, I>>(base?: I): Filter {
    return Filter.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Filter>, I>>(object: I): Filter {
    const message = createBaseFilter();
    message.field = object.field ?? 0;
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseFilters(): Filters {
  return { filters: [] };
}

export const Filters: MessageFns<Filters> = {
  encode(message: Filters, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.filters) {
      Filter.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Filters {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFilters();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filters.push(Filter.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Filters {
    return {
      filters: globalThis.Array.isArray(object?.filters) ? object.filters.map((e: any) => Filter.fromJSON(e)) : [],
    };
  },

  toJSON(message: Filters): unknown {
    const obj: any = {};
    if (message.filters?.length) {
      obj.filters = message.filters.map((e) => Filter.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Filters>, I>>(base?: I): Filters {
    return Filters.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Filters>, I>>(object: I): Filters {
    const message = createBaseFilters();
    message.filters = object.filters?.map((e) => Filter.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetPaginatedCommentsRequest(): GetPaginatedCommentsRequest {
  return { resourceId: "", stringKey: undefined, intKey: undefined, limit: 0, order: 0, column: 0, filters: undefined };
}

export const GetPaginatedCommentsRequest: MessageFns<GetPaginatedCommentsRequest> = {
  encode(message: GetPaginatedCommentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceId !== "") {
      writer.uint32(10).string(message.resourceId);
    }
    if (message.stringKey !== undefined) {
      writer.uint32(18).string(message.stringKey);
    }
    if (message.intKey !== undefined) {
      writer.uint32(24).int64(message.intKey);
    }
    if (message.limit !== 0) {
      writer.uint32(32).int32(message.limit);
    }
    if (message.order !== 0) {
      writer.uint32(40).int32(message.order);
    }
    if (message.column !== 0) {
      writer.uint32(48).int32(message.column);
    }
    if (message.filters !== undefined) {
      Filters.encode(message.filters, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPaginatedCommentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPaginatedCommentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.resourceId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.stringKey = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.intKey = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.order = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.column = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.filters = Filters.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPaginatedCommentsRequest {
    return {
      resourceId: isSet(object.resourceId) ? globalThis.String(object.resourceId) : "",
      stringKey: isSet(object.stringKey) ? globalThis.String(object.stringKey) : undefined,
      intKey: isSet(object.intKey) ? globalThis.String(object.intKey) : undefined,
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      order: isSet(object.order) ? sortOrderFromJSON(object.order) : 0,
      column: isSet(object.column) ? commentSortColumnFromJSON(object.column) : 0,
      filters: isSet(object.filters) ? Filters.fromJSON(object.filters) : undefined,
    };
  },

  toJSON(message: GetPaginatedCommentsRequest): unknown {
    const obj: any = {};
    if (message.resourceId !== "") {
      obj.resourceId = message.resourceId;
    }
    if (message.stringKey !== undefined) {
      obj.stringKey = message.stringKey;
    }
    if (message.intKey !== undefined) {
      obj.intKey = message.intKey;
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.order !== 0) {
      obj.order = sortOrderToJSON(message.order);
    }
    if (message.column !== 0) {
      obj.column = commentSortColumnToJSON(message.column);
    }
    if (message.filters !== undefined) {
      obj.filters = Filters.toJSON(message.filters);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPaginatedCommentsRequest>, I>>(base?: I): GetPaginatedCommentsRequest {
    return GetPaginatedCommentsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPaginatedCommentsRequest>, I>>(object: I): GetPaginatedCommentsRequest {
    const message = createBaseGetPaginatedCommentsRequest();
    message.resourceId = object.resourceId ?? "";
    message.stringKey = object.stringKey ?? undefined;
    message.intKey = object.intKey ?? undefined;
    message.limit = object.limit ?? 0;
    message.order = object.order ?? 0;
    message.column = object.column ?? 0;
    message.filters = (object.filters !== undefined && object.filters !== null)
      ? Filters.fromPartial(object.filters)
      : undefined;
    return message;
  },
};

function createBaseGetPaginatedCommentsResponse(): GetPaginatedCommentsResponse {
  return { comments: [], lastComment: undefined };
}

export const GetPaginatedCommentsResponse: MessageFns<GetPaginatedCommentsResponse> = {
  encode(message: GetPaginatedCommentsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.comments) {
      Comment.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.lastComment !== undefined) {
      Comment.encode(message.lastComment, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPaginatedCommentsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPaginatedCommentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.comments.push(Comment.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.lastComment = Comment.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPaginatedCommentsResponse {
    return {
      comments: globalThis.Array.isArray(object?.comments) ? object.comments.map((e: any) => Comment.fromJSON(e)) : [],
      lastComment: isSet(object.lastComment) ? Comment.fromJSON(object.lastComment) : undefined,
    };
  },

  toJSON(message: GetPaginatedCommentsResponse): unknown {
    const obj: any = {};
    if (message.comments?.length) {
      obj.comments = message.comments.map((e) => Comment.toJSON(e));
    }
    if (message.lastComment !== undefined) {
      obj.lastComment = Comment.toJSON(message.lastComment);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPaginatedCommentsResponse>, I>>(base?: I): GetPaginatedCommentsResponse {
    return GetPaginatedCommentsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPaginatedCommentsResponse>, I>>(object: I): GetPaginatedCommentsResponse {
    const message = createBaseGetPaginatedCommentsResponse();
    message.comments = object.comments?.map((e) => Comment.fromPartial(e)) || [];
    message.lastComment = (object.lastComment !== undefined && object.lastComment !== null)
      ? Comment.fromPartial(object.lastComment)
      : undefined;
    return message;
  },
};

function createBaseCreateCommentRequest(): CreateCommentRequest {
  return { content: "", author: "", parentId: "", resourceId: "" };
}

export const CreateCommentRequest: MessageFns<CreateCommentRequest> = {
  encode(message: CreateCommentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.content !== "") {
      writer.uint32(10).string(message.content);
    }
    if (message.author !== "") {
      writer.uint32(18).string(message.author);
    }
    if (message.parentId !== "") {
      writer.uint32(26).string(message.parentId);
    }
    if (message.resourceId !== "") {
      writer.uint32(34).string(message.resourceId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCommentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCommentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.content = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.author = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.parentId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.resourceId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCommentRequest {
    return {
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      author: isSet(object.author) ? globalThis.String(object.author) : "",
      parentId: isSet(object.parentId) ? globalThis.String(object.parentId) : "",
      resourceId: isSet(object.resourceId) ? globalThis.String(object.resourceId) : "",
    };
  },

  toJSON(message: CreateCommentRequest): unknown {
    const obj: any = {};
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.author !== "") {
      obj.author = message.author;
    }
    if (message.parentId !== "") {
      obj.parentId = message.parentId;
    }
    if (message.resourceId !== "") {
      obj.resourceId = message.resourceId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateCommentRequest>, I>>(base?: I): CreateCommentRequest {
    return CreateCommentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateCommentRequest>, I>>(object: I): CreateCommentRequest {
    const message = createBaseCreateCommentRequest();
    message.content = object.content ?? "";
    message.author = object.author ?? "";
    message.parentId = object.parentId ?? "";
    message.resourceId = object.resourceId ?? "";
    return message;
  },
};

function createBaseCommentResponse(): CommentResponse {
  return { comment: undefined };
}

export const CommentResponse: MessageFns<CommentResponse> = {
  encode(message: CommentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.comment !== undefined) {
      Comment.encode(message.comment, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.comment = Comment.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommentResponse {
    return { comment: isSet(object.comment) ? Comment.fromJSON(object.comment) : undefined };
  },

  toJSON(message: CommentResponse): unknown {
    const obj: any = {};
    if (message.comment !== undefined) {
      obj.comment = Comment.toJSON(message.comment);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommentResponse>, I>>(base?: I): CommentResponse {
    return CommentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommentResponse>, I>>(object: I): CommentResponse {
    const message = createBaseCommentResponse();
    message.comment = (object.comment !== undefined && object.comment !== null)
      ? Comment.fromPartial(object.comment)
      : undefined;
    return message;
  },
};

/** Service definition for managing comments. */
export interface CommentService {
  GetPaginatedComments(request: GetPaginatedCommentsRequest): Promise<GetPaginatedCommentsResponse>;
  CreateComment(request: CreateCommentRequest): Promise<CommentResponse>;
}

export const CommentServiceServiceName = "comment.CommentService";
export class CommentServiceClientImpl implements CommentService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || CommentServiceServiceName;
    this.rpc = rpc;
    this.GetPaginatedComments = this.GetPaginatedComments.bind(this);
    this.CreateComment = this.CreateComment.bind(this);
  }
  GetPaginatedComments(request: GetPaginatedCommentsRequest): Promise<GetPaginatedCommentsResponse> {
    const data = GetPaginatedCommentsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetPaginatedComments", data);
    return promise.then((data) => GetPaginatedCommentsResponse.decode(new BinaryReader(data)));
  }

  CreateComment(request: CreateCommentRequest): Promise<CommentResponse> {
    const data = CreateCommentRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateComment", data);
    return promise.then((data) => CommentResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
